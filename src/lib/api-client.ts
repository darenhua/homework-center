import createClient, { type Middleware } from "openapi-fetch";

import type { paths } from "@/types/schema.gen"; // generated by openapi-typescript

import { supabase } from "./supabase";

const apiClient = createClient<paths>({
    baseUrl: import.meta.env.VITE_API_URL,
});

const middleware: Middleware = {
    async onRequest({ request }) {
        const {
            data: { session },
        } = await supabase.auth.getSession();
        if (session?.access_token) {
            request.headers.set(
                "Authorization",
                `Bearer ${session.access_token}`
            );
        }
    },
};

apiClient.use(middleware);

export function formDataSerializer<T extends Record<string, string | Blob>>(
    data: T
): FormData {
    const formData = new FormData();

    for (const [key, value] of Object.entries(data)) {
        if (value instanceof Blob) {
            formData.set(key, value);
        } else {
            formData.set(key, value);
        }
    }

    return formData;
}

export default apiClient;
